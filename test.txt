app/src/analysis.js -> app/dist/analysis.js
app/src/jiffify.js -> app/dist/jiffify.js
app/src/run.js -> app/dist/run.js

> jiffify@1.0.0 test /Users/lucyqin/Documents/multiparty/jiffify
> mocha --reporter spec



  #successCases
{ __esModule: true,
  STATEMENT_OR_BLOCK_KEYS: [Getter],
  FLATTENABLE_KEYS: [Getter],
  FOR_INIT_KEYS: [Getter],
  COMMENT_KEYS: [Getter],
  LOGICAL_OPERATORS: [Getter],
  UPDATE_OPERATORS: [Getter],
  BOOLEAN_NUMBER_BINARY_OPERATORS: [Getter],
  EQUALITY_BINARY_OPERATORS: [Getter],
  COMPARISON_BINARY_OPERATORS: [Getter],
  BOOLEAN_BINARY_OPERATORS: [Getter],
  NUMBER_BINARY_OPERATORS: [Getter],
  BINARY_OPERATORS: [Getter],
  BOOLEAN_UNARY_OPERATORS: [Getter],
  NUMBER_UNARY_OPERATORS: [Getter],
  STRING_UNARY_OPERATORS: [Getter],
  UNARY_OPERATORS: [Getter],
  INHERIT_KEYS: [Getter],
  BLOCK_SCOPED_SYMBOL: [Getter],
  NOT_LOCAL_BINDING: [Getter],
  VISITOR_KEYS: 
   { ArrayExpression: [ 'elements' ],
     AssignmentExpression: [ 'left', 'right' ],
     BinaryExpression: [ 'left', 'right' ],
     Directive: [ 'value' ],
     DirectiveLiteral: [],
     BlockStatement: [ 'directives', 'body' ],
     BreakStatement: [ 'label' ],
     CallExpression: [ 'callee', 'arguments' ],
     CatchClause: [ 'param', 'body' ],
     ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
     ContinueStatement: [ 'label' ],
     DebuggerStatement: [],
     DoWhileStatement: [ 'test', 'body' ],
     EmptyStatement: [],
     ExpressionStatement: [ 'expression' ],
     File: [ 'program' ],
     ForInStatement: [ 'left', 'right', 'body' ],
     ForStatement: [ 'init', 'test', 'update', 'body' ],
     FunctionDeclaration: [ 'id', 'params', 'body', 'returnType', 'typeParameters' ],
     FunctionExpression: [ 'id', 'params', 'body', 'returnType', 'typeParameters' ],
     Identifier: [ 'typeAnnotation' ],
     IfStatement: [ 'test', 'consequent', 'alternate' ],
     LabeledStatement: [ 'label', 'body' ],
     StringLiteral: [],
     NumericLiteral: [],
     NullLiteral: [],
     BooleanLiteral: [],
     RegExpLiteral: [],
     LogicalExpression: [ 'left', 'right' ],
     MemberExpression: [ 'object', 'property' ],
     NewExpression: [ 'callee', 'arguments' ],
     Program: [ 'directives', 'body' ],
     ObjectExpression: [ 'properties' ],
     ObjectMethod: 
      [ 'key',
        'params',
        'body',
        'decorators',
        'returnType',
        'typeParameters' ],
     ObjectProperty: [ 'key', 'value', 'decorators' ],
     RestElement: [ 'argument', 'typeAnnotation' ],
     ReturnStatement: [ 'argument' ],
     SequenceExpression: [ 'expressions' ],
     SwitchCase: [ 'test', 'consequent' ],
     SwitchStatement: [ 'discriminant', 'cases' ],
     ThisExpression: [],
     ThrowStatement: [ 'argument' ],
     TryStatement: [ 'block', 'handler', 'finalizer' ],
     UnaryExpression: [ 'argument' ],
     UpdateExpression: [ 'argument' ],
     VariableDeclaration: [ 'declarations' ],
     VariableDeclarator: [ 'id', 'init' ],
     WhileStatement: [ 'test', 'body' ],
     WithStatement: [ 'object', 'body' ],
     AssignmentPattern: [ 'left', 'right' ],
     ArrayPattern: [ 'elements', 'typeAnnotation' ],
     ArrowFunctionExpression: [ 'params', 'body', 'returnType', 'typeParameters' ],
     ClassBody: [ 'body' ],
     ClassDeclaration: 
      [ 'id',
        'body',
        'superClass',
        'mixins',
        'typeParameters',
        'superTypeParameters',
        'implements',
        'decorators' ],
     ClassExpression: 
      [ 'id',
        'body',
        'superClass',
        'mixins',
        'typeParameters',
        'superTypeParameters',
        'implements',
        'decorators' ],
     ExportAllDeclaration: [ 'source' ],
     ExportDefaultDeclaration: [ 'declaration' ],
     ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
     ExportSpecifier: [ 'local', 'exported' ],
     ForOfStatement: [ 'left', 'right', 'body' ],
     ImportDeclaration: [ 'specifiers', 'source' ],
     ImportDefaultSpecifier: [ 'local' ],
     ImportNamespaceSpecifier: [ 'local' ],
     ImportSpecifier: [ 'local', 'imported' ],
     MetaProperty: [ 'meta', 'property' ],
     ClassMethod: 
      [ 'key',
        'params',
        'body',
        'decorators',
        'returnType',
        'typeParameters' ],
     ObjectPattern: [ 'properties', 'typeAnnotation' ],
     SpreadElement: [ 'argument' ],
     Super: [],
     TaggedTemplateExpression: [ 'tag', 'quasi' ],
     TemplateElement: [],
     TemplateLiteral: [ 'quasis', 'expressions' ],
     YieldExpression: [ 'argument' ],
     AnyTypeAnnotation: [],
     ArrayTypeAnnotation: [ 'elementType' ],
     BooleanTypeAnnotation: [],
     BooleanLiteralTypeAnnotation: [],
     NullLiteralTypeAnnotation: [],
     ClassImplements: [ 'id', 'typeParameters' ],
     ClassProperty: [ 'key', 'value', 'typeAnnotation', 'decorators' ],
     DeclareClass: [ 'id', 'typeParameters', 'extends', 'body' ],
     DeclareFunction: [ 'id' ],
     DeclareInterface: [ 'id', 'typeParameters', 'extends', 'body' ],
     DeclareModule: [ 'id', 'body' ],
     DeclareModuleExports: [ 'typeAnnotation' ],
     DeclareTypeAlias: [ 'id', 'typeParameters', 'right' ],
     DeclareOpaqueType: [ 'id', 'typeParameters', 'supertype' ],
     DeclareVariable: [ 'id' ],
     DeclareExportDeclaration: [ 'declaration', 'specifiers', 'source' ],
     ExistentialTypeParam: [],
     FunctionTypeAnnotation: [ 'typeParameters', 'params', 'rest', 'returnType' ],
     FunctionTypeParam: [ 'name', 'typeAnnotation' ],
     GenericTypeAnnotation: [ 'id', 'typeParameters' ],
     InterfaceExtends: [ 'id', 'typeParameters' ],
     InterfaceDeclaration: [ 'id', 'typeParameters', 'extends', 'body' ],
     IntersectionTypeAnnotation: [ 'types' ],
     MixedTypeAnnotation: [],
     EmptyTypeAnnotation: [],
     NullableTypeAnnotation: [ 'typeAnnotation' ],
     NumericLiteralTypeAnnotation: [],
     NumberTypeAnnotation: [],
     StringLiteralTypeAnnotation: [],
     StringTypeAnnotation: [],
     ThisTypeAnnotation: [],
     TupleTypeAnnotation: [ 'types' ],
     TypeofTypeAnnotation: [ 'argument' ],
     TypeAlias: [ 'id', 'typeParameters', 'right' ],
     OpaqueType: [ 'id', 'typeParameters', 'impltype', 'supertype' ],
     TypeAnnotation: [ 'typeAnnotation' ],
     TypeCastExpression: [ 'expression', 'typeAnnotation' ],
     TypeParameter: [ 'bound' ],
     TypeParameterDeclaration: [ 'params' ],
     TypeParameterInstantiation: [ 'params' ],
     ObjectTypeAnnotation: [ 'properties', 'indexers', 'callProperties' ],
     ObjectTypeCallProperty: [ 'value' ],
     ObjectTypeIndexer: [ 'id', 'key', 'value' ],
     ObjectTypeProperty: [ 'key', 'value' ],
     ObjectTypeSpreadProperty: [ 'argument' ],
     QualifiedTypeIdentifier: [ 'id', 'qualification' ],
     UnionTypeAnnotation: [ 'types' ],
     VoidTypeAnnotation: [],
     JSXAttribute: [ 'name', 'value' ],
     JSXClosingElement: [ 'name' ],
     JSXElement: [ 'openingElement', 'children', 'closingElement' ],
     JSXEmptyExpression: [],
     JSXExpressionContainer: [ 'expression' ],
     JSXSpreadChild: [ 'expression' ],
     JSXIdentifier: [],
     JSXMemberExpression: [ 'object', 'property' ],
     JSXNamespacedName: [ 'namespace', 'name' ],
     JSXOpeningElement: [ 'name', 'attributes' ],
     JSXSpreadAttribute: [ 'argument' ],
     JSXText: [],
     Noop: [],
     ParenthesizedExpression: [ 'expression' ],
     AwaitExpression: [ 'argument' ],
     ForAwaitStatement: [ 'left', 'right', 'body' ],
     BindExpression: [ 'object', 'callee' ],
     Import: [],
     Decorator: [ 'expression' ],
     DoExpression: [ 'body' ],
     ExportDefaultSpecifier: [ 'exported' ],
     ExportNamespaceSpecifier: [ 'exported' ],
     RestProperty: [ 'argument' ],
     SpreadProperty: [ 'argument' ] },
  ALIAS_KEYS: 
   { ArrayExpression: [ 'Expression' ],
     AssignmentExpression: [ 'Expression' ],
     BinaryExpression: [ 'Binary', 'Expression' ],
     Directive: [],
     DirectiveLiteral: [],
     BlockStatement: [ 'Scopable', 'BlockParent', 'Block', 'Statement' ],
     BreakStatement: [ 'Statement', 'Terminatorless', 'CompletionStatement' ],
     CallExpression: [ 'Expression' ],
     CatchClause: [ 'Scopable' ],
     ConditionalExpression: [ 'Expression', 'Conditional' ],
     ContinueStatement: [ 'Statement', 'Terminatorless', 'CompletionStatement' ],
     DebuggerStatement: [ 'Statement' ],
     DoWhileStatement: [ 'Statement', 'BlockParent', 'Loop', 'While', 'Scopable' ],
     EmptyStatement: [ 'Statement' ],
     ExpressionStatement: [ 'Statement', 'ExpressionWrapper' ],
     File: [],
     ForInStatement: 
      [ 'Scopable',
        'Statement',
        'For',
        'BlockParent',
        'Loop',
        'ForXStatement' ],
     ForStatement: [ 'Scopable', 'Statement', 'For', 'BlockParent', 'Loop' ],
     FunctionDeclaration: 
      [ 'Scopable',
        'Function',
        'BlockParent',
        'FunctionParent',
        'Statement',
        'Pureish',
        'Declaration' ],
     FunctionExpression: 
      [ 'Scopable',
        'Function',
        'BlockParent',
        'FunctionParent',
        'Expression',
        'Pureish' ],
     Identifier: [ 'Expression', 'LVal' ],
     IfStatement: [ 'Statement', 'Conditional' ],
     LabeledStatement: [ 'Statement' ],
     StringLiteral: [ 'Expression', 'Pureish', 'Literal', 'Immutable' ],
     NumericLiteral: [ 'Expression', 'Pureish', 'Literal', 'Immutable' ],
     NullLiteral: [ 'Expression', 'Pureish', 'Literal', 'Immutable' ],
     BooleanLiteral: [ 'Expression', 'Pureish', 'Literal', 'Immutable' ],
     RegExpLiteral: [ 'Expression', 'Literal' ],
     LogicalExpression: [ 'Binary', 'Expression' ],
     MemberExpression: [ 'Expression', 'LVal' ],
     NewExpression: [ 'Expression' ],
     Program: [ 'Scopable', 'BlockParent', 'Block', 'FunctionParent' ],
     ObjectExpression: [ 'Expression' ],
     ObjectMethod: 
      [ 'UserWhitespacable',
        'Function',
        'Scopable',
        'BlockParent',
        'FunctionParent',
        'Method',
        'ObjectMember' ],
     ObjectProperty: [ 'UserWhitespacable', 'Property', 'ObjectMember' ],
     RestElement: [ 'LVal' ],
     ReturnStatement: [ 'Statement', 'Terminatorless', 'CompletionStatement' ],
     SequenceExpression: [ 'Expression' ],
     SwitchCase: [],
     SwitchStatement: [ 'Statement', 'BlockParent', 'Scopable' ],
     ThisExpression: [ 'Expression' ],
     ThrowStatement: [ 'Statement', 'Terminatorless', 'CompletionStatement' ],
     TryStatement: [ 'Statement' ],
     UnaryExpression: [ 'UnaryLike', 'Expression' ],
     UpdateExpression: [ 'Expression' ],
     VariableDeclaration: [ 'Statement', 'Declaration' ],
     VariableDeclarator: [],
     WhileStatement: [ 'Statement', 'BlockParent', 'Loop', 'While', 'Scopable' ],
     WithStatement: [ 'Statement' ],
     AssignmentPattern: [ 'Pattern', 'LVal' ],
     ArrayPattern: [ 'Pattern', 'LVal' ],
     ArrowFunctionExpression: 
      [ 'Scopable',
        'Function',
        'BlockParent',
        'FunctionParent',
        'Expression',
        'Pureish' ],
     ClassBody: [],
     ClassDeclaration: [ 'Scopable', 'Class', 'Statement', 'Declaration', 'Pureish' ],
     ClassExpression: [ 'Scopable', 'Class', 'Expression', 'Pureish' ],
     ExportAllDeclaration: 
      [ 'Statement',
        'Declaration',
        'ModuleDeclaration',
        'ExportDeclaration' ],
     ExportDefaultDeclaration: 
      [ 'Statement',
        'Declaration',
        'ModuleDeclaration',
        'ExportDeclaration' ],
     ExportNamedDeclaration: 
      [ 'Statement',
        'Declaration',
        'ModuleDeclaration',
        'ExportDeclaration' ],
     ExportSpecifier: [ 'ModuleSpecifier' ],
     ForOfStatement: 
      [ 'Scopable',
        'Statement',
        'For',
        'BlockParent',
        'Loop',
        'ForXStatement' ],
     ImportDeclaration: [ 'Statement', 'Declaration', 'ModuleDeclaration' ],
     ImportDefaultSpecifier: [ 'ModuleSpecifier' ],
     ImportNamespaceSpecifier: [ 'ModuleSpecifier' ],
     ImportSpecifier: [ 'ModuleSpecifier' ],
     MetaProperty: [ 'Expression' ],
     ClassMethod: 
      [ 'Function',
        'Scopable',
        'BlockParent',
        'FunctionParent',
        'Method' ],
     ObjectPattern: [ 'Pattern', 'LVal' ],
     SpreadElement: [ 'UnaryLike' ],
     Super: [ 'Expression' ],
     TaggedTemplateExpression: [ 'Expression' ],
     TemplateElement: [],
     TemplateLiteral: [ 'Expression', 'Literal' ],
     YieldExpression: [ 'Expression', 'Terminatorless' ],
     AnyTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     ArrayTypeAnnotation: [ 'Flow' ],
     BooleanTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     BooleanLiteralTypeAnnotation: [ 'Flow' ],
     NullLiteralTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     ClassImplements: [ 'Flow' ],
     ClassProperty: [ 'Property' ],
     DeclareClass: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareFunction: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareInterface: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareModule: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareModuleExports: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareTypeAlias: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareOpaqueType: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareVariable: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     DeclareExportDeclaration: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     ExistentialTypeParam: [ 'Flow' ],
     FunctionTypeAnnotation: [ 'Flow' ],
     FunctionTypeParam: [ 'Flow' ],
     GenericTypeAnnotation: [ 'Flow' ],
     InterfaceExtends: [ 'Flow' ],
     InterfaceDeclaration: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     IntersectionTypeAnnotation: [ 'Flow' ],
     MixedTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     EmptyTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     NullableTypeAnnotation: [ 'Flow' ],
     NumericLiteralTypeAnnotation: [ 'Flow' ],
     NumberTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     StringLiteralTypeAnnotation: [ 'Flow' ],
     StringTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     ThisTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     TupleTypeAnnotation: [ 'Flow' ],
     TypeofTypeAnnotation: [ 'Flow' ],
     TypeAlias: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     OpaqueType: [ 'Flow', 'FlowDeclaration', 'Statement', 'Declaration' ],
     TypeAnnotation: [ 'Flow' ],
     TypeCastExpression: [ 'Flow', 'ExpressionWrapper', 'Expression' ],
     TypeParameter: [ 'Flow' ],
     TypeParameterDeclaration: [ 'Flow' ],
     TypeParameterInstantiation: [ 'Flow' ],
     ObjectTypeAnnotation: [ 'Flow' ],
     ObjectTypeCallProperty: [ 'Flow', 'UserWhitespacable' ],
     ObjectTypeIndexer: [ 'Flow', 'UserWhitespacable' ],
     ObjectTypeProperty: [ 'Flow', 'UserWhitespacable' ],
     ObjectTypeSpreadProperty: [ 'Flow', 'UserWhitespacable' ],
     QualifiedTypeIdentifier: [ 'Flow' ],
     UnionTypeAnnotation: [ 'Flow' ],
     VoidTypeAnnotation: [ 'Flow', 'FlowBaseAnnotation' ],
     JSXAttribute: [ 'JSX', 'Immutable' ],
     JSXClosingElement: [ 'JSX', 'Immutable' ],
     JSXElement: [ 'JSX', 'Immutable', 'Expression' ],
     JSXEmptyExpression: [ 'JSX', 'Expression' ],
     JSXExpressionContainer: [ 'JSX', 'Immutable' ],
     JSXSpreadChild: [ 'JSX', 'Immutable' ],
     JSXIdentifier: [ 'JSX', 'Expression' ],
     JSXMemberExpression: [ 'JSX', 'Expression' ],
     JSXNamespacedName: [ 'JSX' ],
     JSXOpeningElement: [ 'JSX', 'Immutable' ],
     JSXSpreadAttribute: [ 'JSX' ],
     JSXText: [ 'JSX', 'Immutable' ],
     Noop: [],
     ParenthesizedExpression: [ 'Expression', 'ExpressionWrapper' ],
     AwaitExpression: [ 'Expression', 'Terminatorless' ],
     ForAwaitStatement: 
      [ 'Scopable',
        'Statement',
        'For',
        'BlockParent',
        'Loop',
        'ForXStatement' ],
     BindExpression: [ 'Expression' ],
     Import: [ 'Expression' ],
     Decorator: [],
     DoExpression: [ 'Expression' ],
     ExportDefaultSpecifier: [ 'ModuleSpecifier' ],
     ExportNamespaceSpecifier: [ 'ModuleSpecifier' ],
     RestProperty: [ 'UnaryLike' ],
     SpreadProperty: [ 'UnaryLike' ] },
  NODE_FIELDS: 
   { ArrayExpression: { elements: [Object] },
     AssignmentExpression: { operator: [Object], left: [Object], right: [Object] },
     BinaryExpression: { operator: [Object], left: [Object], right: [Object] },
     Directive: { value: [Object] },
     DirectiveLiteral: { value: [Object] },
     BlockStatement: { directives: [Object], body: [Object] },
     BreakStatement: { label: [Object] },
     CallExpression: { callee: [Object], arguments: [Object] },
     CatchClause: { param: [Object], body: [Object] },
     ConditionalExpression: { test: [Object], consequent: [Object], alternate: [Object] },
     ContinueStatement: { label: [Object] },
     DebuggerStatement: {},
     DoWhileStatement: { test: [Object], body: [Object] },
     EmptyStatement: {},
     ExpressionStatement: { expression: [Object] },
     File: { program: [Object], comments: [Object], tokens: [Object] },
     ForInStatement: { left: [Object], right: [Object], body: [Object] },
     ForStatement: 
      { init: [Object],
        test: [Object],
        update: [Object],
        body: [Object] },
     FunctionDeclaration: 
      { id: [Object],
        params: [Object],
        body: [Object],
        generator: [Object],
        async: [Object],
        returnType: [Object],
        typeParameters: [Object] },
     FunctionExpression: 
      { id: [Object],
        params: [Object],
        body: [Object],
        generator: [Object],
        async: [Object],
        returnType: [Object],
        typeParameters: [Object] },
     Identifier: 
      { name: [Object],
        decorators: [Object],
        typeAnnotation: [Object] },
     IfStatement: { test: [Object], consequent: [Object], alternate: [Object] },
     LabeledStatement: { label: [Object], body: [Object] },
     StringLiteral: { value: [Object] },
     NumericLiteral: { value: [Object] },
     NullLiteral: {},
     BooleanLiteral: { value: [Object] },
     RegExpLiteral: { pattern: [Object], flags: [Object] },
     LogicalExpression: { operator: [Object], left: [Object], right: [Object] },
     MemberExpression: { object: [Object], property: [Object], computed: [Object] },
     NewExpression: { callee: [Object], arguments: [Object] },
     Program: { directives: [Object], body: [Object] },
     ObjectExpression: { properties: [Object] },
     ObjectMethod: 
      { kind: [Object],
        computed: [Object],
        key: [Object],
        decorators: [Object],
        body: [Object],
        generator: [Object],
        async: [Object],
        params: [Object],
        returnType: [Object],
        typeParameters: [Object] },
     ObjectProperty: 
      { computed: [Object],
        key: [Object],
        value: [Object],
        shorthand: [Object],
        decorators: [Object] },
     RestElement: 
      { argument: [Object],
        decorators: [Object],
        typeAnnotation: [Object] },
     ReturnStatement: { argument: [Object] },
     SequenceExpression: { expressions: [Object] },
     SwitchCase: { test: [Object], consequent: [Object] },
     SwitchStatement: { discriminant: [Object], cases: [Object] },
     ThisExpression: {},
     ThrowStatement: { argument: [Object] },
     TryStatement: 
      { body: [Object],
        handler: [Object],
        finalizer: [Object],
        block: [Object] },
     UnaryExpression: { prefix: [Object], argument: [Object], operator: [Object] },
     UpdateExpression: { prefix: [Object], argument: [Object], operator: [Object] },
     VariableDeclaration: { kind: [Object], declarations: [Object] },
     VariableDeclarator: { id: [Object], init: [Object] },
     WhileStatement: { test: [Object], body: [Object] },
     WithStatement: { object: [Object], body: [Object] },
     AssignmentPattern: { left: [Object], right: [Object], decorators: [Object] },
     ArrayPattern: 
      { elements: [Object],
        decorators: [Object],
        typeAnnotation: [Object] },
     ArrowFunctionExpression: 
      { params: [Object],
        body: [Object],
        async: [Object],
        returnType: [Object],
        typeParameters: [Object] },
     ClassBody: { body: [Object] },
     ClassDeclaration: 
      { id: [Object],
        body: [Object],
        superClass: [Object],
        decorators: [Object],
        mixins: [Object],
        typeParameters: [Object],
        superTypeParameters: [Object],
        implements: [Object] },
     ClassExpression: 
      { id: [Object],
        body: [Object],
        superClass: [Object],
        decorators: [Object],
        mixins: [Object],
        typeParameters: [Object],
        superTypeParameters: [Object],
        implements: [Object] },
     ExportAllDeclaration: { source: [Object] },
     ExportDefaultDeclaration: { declaration: [Object] },
     ExportNamedDeclaration: { declaration: [Object], specifiers: [Object], source: [Object] },
     ExportSpecifier: { local: [Object], exported: [Object] },
     ForOfStatement: { left: [Object], right: [Object], body: [Object] },
     ImportDeclaration: { specifiers: [Object], source: [Object] },
     ImportDefaultSpecifier: { local: [Object] },
     ImportNamespaceSpecifier: { local: [Object] },
     ImportSpecifier: { local: [Object], imported: [Object], importKind: [Object] },
     MetaProperty: { meta: [Object], property: [Object] },
     ClassMethod: 
      { kind: [Object],
        computed: [Object],
        static: [Object],
        key: [Object],
        params: [Object],
        body: [Object],
        generator: [Object],
        async: [Object],
        decorators: [Object],
        returnType: [Object],
        typeParameters: [Object] },
     ObjectPattern: 
      { properties: [Object],
        decorators: [Object],
        typeAnnotation: [Object] },
     SpreadElement: { argument: [Object] },
     Super: {},
     TaggedTemplateExpression: { tag: [Object], quasi: [Object] },
     TemplateElement: { value: [Object], tail: [Object] },
     TemplateLiteral: { quasis: [Object], expressions: [Object] },
     YieldExpression: { delegate: [Object], argument: [Object] },
     AnyTypeAnnotation: {},
     ArrayTypeAnnotation: { elementType: [Object] },
     BooleanTypeAnnotation: {},
     BooleanLiteralTypeAnnotation: {},
     NullLiteralTypeAnnotation: {},
     ClassImplements: { id: [Object], typeParameters: [Object] },
     ClassProperty: 
      { computed: [Object],
        key: [Object],
        value: [Object],
        typeAnnotation: [Object],
        decorators: [Object] },
     DeclareClass: 
      { id: [Object],
        typeParameters: [Object],
        extends: [Object],
        body: [Object] },
     DeclareFunction: { id: [Object] },
     DeclareInterface: 
      { id: [Object],
        typeParameters: [Object],
        extends: [Object],
        body: [Object] },
     DeclareModule: { id: [Object], body: [Object] },
     DeclareModuleExports: { typeAnnotation: [Object] },
     DeclareTypeAlias: { id: [Object], typeParameters: [Object], right: [Object] },
     DeclareOpaqueType: { id: [Object], typeParameters: [Object], supertype: [Object] },
     DeclareVariable: { id: [Object] },
     DeclareExportDeclaration: { declaration: [Object], specifiers: [Object], source: [Object] },
     ExistentialTypeParam: {},
     FunctionTypeAnnotation: 
      { typeParameters: [Object],
        params: [Object],
        rest: [Object],
        returnType: [Object] },
     FunctionTypeParam: { name: [Object], typeAnnotation: [Object] },
     GenericTypeAnnotation: { id: [Object], typeParameters: [Object] },
     InterfaceExtends: { id: [Object], typeParameters: [Object] },
     InterfaceDeclaration: 
      { id: [Object],
        typeParameters: [Object],
        extends: [Object],
        body: [Object] },
     IntersectionTypeAnnotation: { types: [Object] },
     MixedTypeAnnotation: {},
     EmptyTypeAnnotation: {},
     NullableTypeAnnotation: { typeAnnotation: [Object] },
     NumericLiteralTypeAnnotation: {},
     NumberTypeAnnotation: {},
     StringLiteralTypeAnnotation: {},
     StringTypeAnnotation: {},
     ThisTypeAnnotation: {},
     TupleTypeAnnotation: { types: [Object] },
     TypeofTypeAnnotation: { argument: [Object] },
     TypeAlias: { id: [Object], typeParameters: [Object], right: [Object] },
     OpaqueType: 
      { id: [Object],
        typeParameters: [Object],
        impltype: [Object],
        supertype: [Object] },
     TypeAnnotation: { typeAnnotation: [Object] },
     TypeCastExpression: { expression: [Object], typeAnnotation: [Object] },
     TypeParameter: { bound: [Object] },
     TypeParameterDeclaration: { params: [Object] },
     TypeParameterInstantiation: { params: [Object] },
     ObjectTypeAnnotation: 
      { properties: [Object],
        indexers: [Object],
        callProperties: [Object] },
     ObjectTypeCallProperty: { value: [Object] },
     ObjectTypeIndexer: { id: [Object], key: [Object], value: [Object] },
     ObjectTypeProperty: { key: [Object], value: [Object] },
     ObjectTypeSpreadProperty: { argument: [Object] },
     QualifiedTypeIdentifier: { id: [Object], qualification: [Object] },
     UnionTypeAnnotation: { types: [Object] },
     VoidTypeAnnotation: {},
     JSXAttribute: { name: [Object], value: [Object] },
     JSXClosingElement: { name: [Object] },
     JSXElement: 
      { openingElement: [Object],
        closingElement: [Object],
        children: [Object],
        selfClosing: [Object] },
     JSXEmptyExpression: {},
     JSXExpressionContainer: { expression: [Object] },
     JSXSpreadChild: { expression: [Object] },
     JSXIdentifier: { name: [Object] },
     JSXMemberExpression: { object: [Object], property: [Object] },
     JSXNamespacedName: { namespace: [Object], name: [Object] },
     JSXOpeningElement: { name: [Object], selfClosing: [Object], attributes: [Object] },
     JSXSpreadAttribute: { argument: [Object] },
     JSXText: { value: [Object] },
     Noop: {},
     ParenthesizedExpression: { expression: [Object] },
     AwaitExpression: { argument: [Object] },
     ForAwaitStatement: { left: [Object], right: [Object], body: [Object] },
     BindExpression: { object: [Object], callee: [Object] },
     Import: {},
     Decorator: { expression: [Object] },
     DoExpression: { body: [Object] },
     ExportDefaultSpecifier: { exported: [Object] },
     ExportNamespaceSpecifier: { exported: [Object] },
     RestProperty: { argument: [Object] },
     SpreadProperty: { argument: [Object] } },
  BUILDER_KEYS: 
   { ArrayExpression: [ 'elements' ],
     AssignmentExpression: [ 'operator', 'left', 'right' ],
     BinaryExpression: [ 'operator', 'left', 'right' ],
     Directive: [ 'value' ],
     DirectiveLiteral: [ 'value' ],
     BlockStatement: [ 'body', 'directives' ],
     BreakStatement: [ 'label' ],
     CallExpression: [ 'callee', 'arguments' ],
     CatchClause: [ 'param', 'body' ],
     ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
     ContinueStatement: [ 'label' ],
     DebuggerStatement: [],
     DoWhileStatement: [ 'test', 'body' ],
     EmptyStatement: [],
     ExpressionStatement: [ 'expression' ],
     File: [ 'program', 'comments', 'tokens' ],
     ForInStatement: [ 'left', 'right', 'body' ],
     ForStatement: [ 'init', 'test', 'update', 'body' ],
     FunctionDeclaration: [ 'id', 'params', 'body', 'generator', 'async' ],
     FunctionExpression: [ 'id', 'params', 'body', 'generator', 'async' ],
     Identifier: [ 'name' ],
     IfStatement: [ 'test', 'consequent', 'alternate' ],
     LabeledStatement: [ 'label', 'body' ],
     StringLiteral: [ 'value' ],
     NumericLiteral: [ 'value' ],
     NullLiteral: [],
     BooleanLiteral: [ 'value' ],
     RegExpLiteral: [ 'pattern', 'flags' ],
     LogicalExpression: [ 'operator', 'left', 'right' ],
     MemberExpression: [ 'object', 'property', 'computed' ],
     NewExpression: [ 'callee', 'arguments' ],
     Program: [ 'body', 'directives' ],
     ObjectExpression: [ 'properties' ],
     ObjectMethod: [ 'kind', 'key', 'params', 'body', 'computed' ],
     ObjectProperty: [ 'key', 'value', 'computed', 'shorthand', 'decorators' ],
     RestElement: [ 'argument', 'typeAnnotation' ],
     ReturnStatement: [ 'argument' ],
     SequenceExpression: [ 'expressions' ],
     SwitchCase: [ 'test', 'consequent' ],
     SwitchStatement: [ 'discriminant', 'cases' ],
     ThisExpression: [],
     ThrowStatement: [ 'argument' ],
     TryStatement: [ 'block', 'handler', 'finalizer' ],
     UnaryExpression: [ 'operator', 'argument', 'prefix' ],
     UpdateExpression: [ 'operator', 'argument', 'prefix' ],
     VariableDeclaration: [ 'kind', 'declarations' ],
     VariableDeclarator: [ 'id', 'init' ],
     WhileStatement: [ 'test', 'body' ],
     WithStatement: [ 'object', 'body' ],
     AssignmentPattern: [ 'left', 'right' ],
     ArrayPattern: [ 'elements', 'typeAnnotation' ],
     ArrowFunctionExpression: [ 'params', 'body', 'async' ],
     ClassBody: [ 'body' ],
     ClassDeclaration: [ 'id', 'superClass', 'body', 'decorators' ],
     ClassExpression: [ 'id', 'superClass', 'body', 'decorators' ],
     ExportAllDeclaration: [ 'source' ],
     ExportDefaultDeclaration: [ 'declaration' ],
     ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
     ExportSpecifier: [ 'local', 'exported' ],
     ForOfStatement: [ 'left', 'right', 'body' ],
     ImportDeclaration: [ 'specifiers', 'source' ],
     ImportDefaultSpecifier: [ 'local' ],
     ImportNamespaceSpecifier: [ 'local' ],
     ImportSpecifier: [ 'local', 'imported' ],
     MetaProperty: [ 'meta', 'property' ],
     ClassMethod: [ 'kind', 'key', 'params', 'body', 'computed', 'static' ],
     ObjectPattern: [ 'properties', 'typeAnnotation' ],
     SpreadElement: [ 'argument' ],
     Super: [],
     TaggedTemplateExpression: [ 'tag', 'quasi' ],
     TemplateElement: [ 'value', 'tail' ],
     TemplateLiteral: [ 'quasis', 'expressions' ],
     YieldExpression: [ 'argument', 'delegate' ],
     AnyTypeAnnotation: [],
     ArrayTypeAnnotation: [ 'elementType' ],
     BooleanTypeAnnotation: [],
     BooleanLiteralTypeAnnotation: [],
     NullLiteralTypeAnnotation: [],
     ClassImplements: [ 'id', 'typeParameters' ],
     ClassProperty: [ 'key', 'value', 'typeAnnotation', 'decorators', 'computed' ],
     DeclareClass: [ 'id', 'typeParameters', 'extends', 'body' ],
     DeclareFunction: [ 'id' ],
     DeclareInterface: [ 'id', 'typeParameters', 'extends', 'body' ],
     DeclareModule: [ 'id', 'body' ],
     DeclareModuleExports: [ 'typeAnnotation' ],
     DeclareTypeAlias: [ 'id', 'typeParameters', 'right' ],
     DeclareOpaqueType: [ 'id', 'typeParameters', 'supertype' ],
     DeclareVariable: [ 'id' ],
     DeclareExportDeclaration: [ 'declaration', 'specifiers', 'source' ],
     ExistentialTypeParam: [],
     FunctionTypeAnnotation: [ 'typeParameters', 'params', 'rest', 'returnType' ],
     FunctionTypeParam: [ 'name', 'typeAnnotation' ],
     GenericTypeAnnotation: [ 'id', 'typeParameters' ],
     InterfaceExtends: [ 'id', 'typeParameters' ],
     InterfaceDeclaration: [ 'id', 'typeParameters', 'extends', 'body' ],
     IntersectionTypeAnnotation: [ 'types' ],
     MixedTypeAnnotation: [],
     EmptyTypeAnnotation: [],
     NullableTypeAnnotation: [ 'typeAnnotation' ],
     NumericLiteralTypeAnnotation: [],
     NumberTypeAnnotation: [],
     StringLiteralTypeAnnotation: [],
     StringTypeAnnotation: [],
     ThisTypeAnnotation: [],
     TupleTypeAnnotation: [ 'types' ],
     TypeofTypeAnnotation: [ 'argument' ],
     TypeAlias: [ 'id', 'typeParameters', 'right' ],
     OpaqueType: [ 'id', 'typeParameters', 'impltype', 'supertype' ],
     TypeAnnotation: [ 'typeAnnotation' ],
     TypeCastExpression: [ 'expression', 'typeAnnotation' ],
     TypeParameter: [ 'bound' ],
     TypeParameterDeclaration: [ 'params' ],
     TypeParameterInstantiation: [ 'params' ],
     ObjectTypeAnnotation: [ 'properties', 'indexers', 'callProperties' ],
     ObjectTypeCallProperty: [ 'value' ],
     ObjectTypeIndexer: [ 'id', 'key', 'value' ],
     ObjectTypeProperty: [ 'key', 'value' ],
     ObjectTypeSpreadProperty: [ 'argument' ],
     QualifiedTypeIdentifier: [ 'id', 'qualification' ],
     UnionTypeAnnotation: [ 'types' ],
     VoidTypeAnnotation: [],
     JSXAttribute: [ 'name', 'value' ],
     JSXClosingElement: [ 'name' ],
     JSXElement: [ 'openingElement', 'closingElement', 'children', 'selfClosing' ],
     JSXEmptyExpression: [],
     JSXExpressionContainer: [ 'expression' ],
     JSXSpreadChild: [ 'expression' ],
     JSXIdentifier: [ 'name' ],
     JSXMemberExpression: [ 'object', 'property' ],
     JSXNamespacedName: [ 'namespace', 'name' ],
     JSXOpeningElement: [ 'name', 'attributes', 'selfClosing' ],
     JSXSpreadAttribute: [ 'argument' ],
     JSXText: [ 'value' ],
     Noop: [],
     ParenthesizedExpression: [ 'expression' ],
     AwaitExpression: [ 'argument' ],
     ForAwaitStatement: [ 'left', 'right', 'body' ],
     BindExpression: [ 'object', 'callee' ],
     Import: [],
     Decorator: [ 'expression' ],
     DoExpression: [ 'body' ],
     ExportDefaultSpecifier: [ 'exported' ],
     ExportNamespaceSpecifier: [ 'exported' ],
     RestProperty: [ 'argument' ],
     SpreadProperty: [ 'argument' ] },
  DEPRECATED_KEYS: 
   { NumberLiteral: 'NumericLiteral',
     RegexLiteral: 'RegExpLiteral' },
  react: 
   { __esModule: true,
     isReactComponent: [Function],
     isCompatTag: [Function: isCompatTag],
     buildChildren: [Function: buildChildren] },
  TYPES: 
   [ 'ArrayExpression',
     'AssignmentExpression',
     'BinaryExpression',
     'Directive',
     'DirectiveLiteral',
     'BlockStatement',
     'BreakStatement',
     'CallExpression',
     'CatchClause',
     'ConditionalExpression',
     'ContinueStatement',
     'DebuggerStatement',
     'DoWhileStatement',
     'EmptyStatement',
     'ExpressionStatement',
     'File',
     'ForInStatement',
     'ForStatement',
     'FunctionDeclaration',
     'FunctionExpression',
     'Identifier',
     'IfStatement',
     'LabeledStatement',
     'StringLiteral',
     'NumericLiteral',
     'NullLiteral',
     'BooleanLiteral',
     'RegExpLiteral',
     'LogicalExpression',
     'MemberExpression',
     'NewExpression',
     'Program',
     'ObjectExpression',
     'ObjectMethod',
     'ObjectProperty',
     'RestElement',
     'ReturnStatement',
     'SequenceExpression',
     'SwitchCase',
     'SwitchStatement',
     'ThisExpression',
     'ThrowStatement',
     'TryStatement',
     'UnaryExpression',
     'UpdateExpression',
     'VariableDeclaration',
     'VariableDeclarator',
     'WhileStatement',
     'WithStatement',
     'AssignmentPattern',
     'ArrayPattern',
     'ArrowFunctionExpression',
     'ClassBody',
     'ClassDeclaration',
     'ClassExpression',
     'ExportAllDeclaration',
     'ExportDefaultDeclaration',
     'ExportNamedDeclaration',
     'ExportSpecifier',
     'ForOfStatement',
     'ImportDeclaration',
     'ImportDefaultSpecifier',
     'ImportNamespaceSpecifier',
     'ImportSpecifier',
     'MetaProperty',
     'ClassMethod',
     'ObjectPattern',
     'SpreadElement',
     'Super',
     'TaggedTemplateExpression',
     'TemplateElement',
     'TemplateLiteral',
     'YieldExpression',
     'AnyTypeAnnotation',
     'ArrayTypeAnnotation',
     'BooleanTypeAnnotation',
     'BooleanLiteralTypeAnnotation',
     'NullLiteralTypeAnnotation',
     'ClassImplements',
     'ClassProperty',
     'DeclareClass',
     'DeclareFunction',
     'DeclareInterface',
     'DeclareModule',
     'DeclareModuleExports',
     'DeclareTypeAlias',
     'DeclareOpaqueType',
     'DeclareVariable',
     'DeclareExportDeclaration',
     'ExistentialTypeParam',
     'FunctionTypeAnnotation',
     'FunctionTypeParam',
     'GenericTypeAnnotation',
     'InterfaceExtends',
     'InterfaceDeclaration',
     'IntersectionTypeAnnotation',
     'MixedTypeAnnotation',
     'EmptyTypeAnnotation',
     'NullableTypeAnnotation',
     'NumericLiteralTypeAnnotation',
     ... 92 more items ],
  getBindingIdentifiers: [Getter],
  getOuterBindingIdentifiers: [Getter],
  isBinding: [Getter],
  isReferenced: [Getter],
  isValidIdentifier: [Getter],
  isLet: [Getter],
  isBlockScoped: [Getter],
  isVar: [Getter],
  isSpecifierDefault: [Getter],
  isScope: [Getter],
  isImmutable: [Getter],
  isNodesEquivalent: [Getter],
  toComputedKey: [Getter],
  toSequenceExpression: [Getter],
  toKeyAlias: [Getter],
  toIdentifier: [Getter],
  toBindingIdentifierName: [Getter],
  toStatement: [Getter],
  toExpression: [Getter],
  toBlock: [Getter],
  valueToNode: [Getter],
  createUnionTypeAnnotation: [Getter],
  removeTypeDuplicates: [Getter],
  createTypeAnnotationBasedOnTypeof: [Getter],
  is: [Function: is],
  isType: [Function: isType],
  validate: [Function: validate],
  shallowEqual: [Function: shallowEqual],
  appendToMemberExpression: [Function: appendToMemberExpression],
  prependToMemberExpression: [Function: prependToMemberExpression],
  ensureBlock: [Function: ensureBlock],
  clone: [Function: clone],
  cloneWithoutLoc: [Function: cloneWithoutLoc],
  cloneDeep: [Function: cloneDeep],
  buildMatchMemberExpression: [Function: buildMatchMemberExpression],
  removeComments: [Function: removeComments],
  inheritsComments: [Function: inheritsComments],
  inheritTrailingComments: [Function: inheritTrailingComments],
  inheritLeadingComments: [Function: inheritLeadingComments],
  inheritInnerComments: [Function: inheritInnerComments],
  inherits: [Function: inherits],
  assertNode: [Function: assertNode],
  isNode: [Function: isNode],
  traverseFast: [Function: traverseFast],
  removeProperties: [Function: removeProperties],
  removePropertiesDeep: [Function: removePropertiesDeep],
  isArrayExpression: [Function],
  assertArrayExpression: [Function],
  isAssignmentExpression: [Function],
  assertAssignmentExpression: [Function],
  isBinaryExpression: [Function],
  assertBinaryExpression: [Function],
  isDirective: [Function],
  assertDirective: [Function],
  isDirectiveLiteral: [Function],
  assertDirectiveLiteral: [Function],
  isBlockStatement: [Function],
  assertBlockStatement: [Function],
  isBreakStatement: [Function],
  assertBreakStatement: [Function],
  isCallExpression: [Function],
  assertCallExpression: [Function],
  isCatchClause: [Function],
  assertCatchClause: [Function],
  isConditionalExpression: [Function],
  assertConditionalExpression: [Function],
  isContinueStatement: [Function],
  assertContinueStatement: [Function],
  isDebuggerStatement: [Function],
  assertDebuggerStatement: [Function],
  isDoWhileStatement: [Function],
  assertDoWhileStatement: [Function],
  isEmptyStatement: [Function],
  assertEmptyStatement: [Function],
  isExpressionStatement: [Function],
  assertExpressionStatement: [Function],
  isFile: [Function],
  assertFile: [Function],
  isForInStatement: [Function],
  assertForInStatement: [Function],
  isForStatement: [Function],
  assertForStatement: [Function],
  isFunctionDeclaration: [Function],
  assertFunctionDeclaration: [Function],
  isFunctionExpression: [Function],
  assertFunctionExpression: [Function],
  isIdentifier: [Function],
  assertIdentifier: [Function],
  isIfStatement: [Function],
  assertIfStatement: [Function],
  isLabeledStatement: [Function],
  assertLabeledStatement: [Function],
  isStringLiteral: [Function],
  assertStringLiteral: [Function],
  isNumericLiteral: [Function],
  assertNumericLiteral: [Function],
  isNullLiteral: [Function],
  assertNullLiteral: [Function],
  isBooleanLiteral: [Function],
  assertBooleanLiteral: [Function],
  isRegExpLiteral: [Function],
  assertRegExpLiteral: [Function],
  isLogicalExpression: [Function],
  assertLogicalExpression: [Function],
  isMemberExpression: [Function],
  assertMemberExpression: [Function],
  isNewExpression: [Function],
  assertNewExpression: [Function],
  isProgram: [Function],
  assertProgram: [Function],
  isObjectExpression: [Function],
  assertObjectExpression: [Function],
  isObjectMethod: [Function],
  assertObjectMethod: [Function],
  isObjectProperty: [Function],
  assertObjectProperty: [Function],
  isRestElement: [Function],
  assertRestElement: [Function],
  isReturnStatement: [Function],
  assertReturnStatement: [Function],
  isSequenceExpression: [Function],
  assertSequenceExpression: [Function],
  isSwitchCase: [Function],
  assertSwitchCase: [Function],
  isSwitchStatement: [Function],
  assertSwitchStatement: [Function],
  isThisExpression: [Function],
  assertThisExpression: [Function],
  isThrowStatement: [Function],
  assertThrowStatement: [Function],
  isTryStatement: [Function],
  assertTryStatement: [Function],
  isUnaryExpression: [Function],
  assertUnaryExpression: [Function],
  isUpdateExpression: [Function],
  assertUpdateExpression: [Function],
  isVariableDeclaration: [Function],
  assertVariableDeclaration: [Function],
  isVariableDeclarator: [Function],
  assertVariableDeclarator: [Function],
  isWhileStatement: [Function],
  assertWhileStatement: [Function],
  isWithStatement: [Function],
  assertWithStatement: [Function],
  isAssignmentPattern: [Function],
  assertAssignmentPattern: [Function],
  isArrayPattern: [Function],
  assertArrayPattern: [Function],
  isArrowFunctionExpression: [Function],
  assertArrowFunctionExpression: [Function],
  isClassBody: [Function],
  assertClassBody: [Function],
  isClassDeclaration: [Function],
  assertClassDeclaration: [Function],
  isClassExpression: [Function],
  assertClassExpression: [Function],
  isExportAllDeclaration: [Function],
  assertExportAllDeclaration: [Function],
  isExportDefaultDeclaration: [Function],
  assertExportDefaultDeclaration: [Function],
  isExportNamedDeclaration: [Function],
  assertExportNamedDeclaration: [Function],
  isExportSpecifier: [Function],
  assertExportSpecifier: [Function],
  isForOfStatement: [Function],
  assertForOfStatement: [Function],
  isImportDeclaration: [Function],
  assertImportDeclaration: [Function],
  isImportDefaultSpecifier: [Function],
  assertImportDefaultSpecifier: [Function],
  isImportNamespaceSpecifier: [Function],
  assertImportNamespaceSpecifier: [Function],
  isImportSpecifier: [Function],
  assertImportSpecifier: [Function],
  isMetaProperty: [Function],
  assertMetaProperty: [Function],
  isClassMethod: [Function],
  assertClassMethod: [Function],
  isObjectPattern: [Function],
  assertObjectPattern: [Function],
  isSpreadElement: [Function],
  assertSpreadElement: [Function],
  isSuper: [Function],
  assertSuper: [Function],
  isTaggedTemplateExpression: [Function],
  assertTaggedTemplateExpression: [Function],
  isTemplateElement: [Function],
  assertTemplateElement: [Function],
  isTemplateLiteral: [Function],
  assertTemplateLiteral: [Function],
  isYieldExpression: [Function],
  assertYieldExpression: [Function],
  isAnyTypeAnnotation: [Function],
  assertAnyTypeAnnotation: [Function],
  isArrayTypeAnnotation: [Function],
  assertArrayTypeAnnotation: [Function],
  isBooleanTypeAnnotation: [Function],
  assertBooleanTypeAnnotation: [Function],
  isBooleanLiteralTypeAnnotation: [Function],
  assertBooleanLiteralTypeAnnotation: [Function],
  isNullLiteralTypeAnnotation: [Function],
  assertNullLiteralTypeAnnotation: [Function],
  isClassImplements: [Function],
  assertClassImplements: [Function],
  isClassProperty: [Function],
  assertClassProperty: [Function],
  isDeclareClass: [Function],
  assertDeclareClass: [Function],
  isDeclareFunction: [Function],
  assertDeclareFunction: [Function],
  isDeclareInterface: [Function],
  assertDeclareInterface: [Function],
  isDeclareModule: [Function],
  assertDeclareModule: [Function],
  isDeclareModuleExports: [Function],
  assertDeclareModuleExports: [Function],
  isDeclareTypeAlias: [Function],
  assertDeclareTypeAlias: [Function],
  isDeclareOpaqueType: [Function],
  assertDeclareOpaqueType: [Function],
  isDeclareVariable: [Function],
  assertDeclareVariable: [Function],
  isDeclareExportDeclaration: [Function],
  assertDeclareExportDeclaration: [Function],
  isExistentialTypeParam: [Function],
  assertExistentialTypeParam: [Function],
  isFunctionTypeAnnotation: [Function],
  assertFunctionTypeAnnotation: [Function],
  isFunctionTypeParam: [Function],
  assertFunctionTypeParam: [Function],
  isGenericTypeAnnotation: [Function],
  assertGenericTypeAnnotation: [Function],
  isInterfaceExtends: [Function],
  assertInterfaceExtends: [Function],
  isInterfaceDeclaration: [Function],
  assertInterfaceDeclaration: [Function],
  isIntersectionTypeAnnotation: [Function],
  assertIntersectionTypeAnnotation: [Function],
  isMixedTypeAnnotation: [Function],
  assertMixedTypeAnnotation: [Function],
  isEmptyTypeAnnotation: [Function],
  assertEmptyTypeAnnotation: [Function],
  isNullableTypeAnnotation: [Function],
  assertNullableTypeAnnotation: [Function],
  isNumericLiteralTypeAnnotation: [Function],
  assertNumericLiteralTypeAnnotation: [Function],
  isNumberTypeAnnotation: [Function],
  assertNumberTypeAnnotation: [Function],
  isStringLiteralTypeAnnotation: [Function],
  assertStringLiteralTypeAnnotation: [Function],
  isStringTypeAnnotation: [Function],
  assertStringTypeAnnotation: [Function],
  isThisTypeAnnotation: [Function],
  assertThisTypeAnnotation: [Function],
  isTupleTypeAnnotation: [Function],
  assertTupleTypeAnnotation: [Function],
  isTypeofTypeAnnotation: [Function],
  assertTypeofTypeAnnotation: [Function],
  isTypeAlias: [Function],
  assertTypeAlias: [Function],
  isOpaqueType: [Function],
  assertOpaqueType: [Function],
  isTypeAnnotation: [Function],
  assertTypeAnnotation: [Function],
  isTypeCastExpression: [Function],
  assertTypeCastExpression: [Function],
  isTypeParameter: [Function],
  assertTypeParameter: [Function],
  isTypeParameterDeclaration: [Function],
  assertTypeParameterDeclaration: [Function],
  isTypeParameterInstantiation: [Function],
  assertTypeParameterInstantiation: [Function],
  isObjectTypeAnnotation: [Function],
  assertObjectTypeAnnotation: [Function],
  isObjectTypeCallProperty: [Function],
  assertObjectTypeCallProperty: [Function],
  isObjectTypeIndexer: [Function],
  assertObjectTypeIndexer: [Function],
  isObjectTypeProperty: [Function],
  assertObjectTypeProperty: [Function],
  isObjectTypeSpreadProperty: [Function],
  assertObjectTypeSpreadProperty: [Function],
  isQualifiedTypeIdentifier: [Function],
  assertQualifiedTypeIdentifier: [Function],
  isUnionTypeAnnotation: [Function],
  assertUnionTypeAnnotation: [Function],
  isVoidTypeAnnotation: [Function],
  assertVoidTypeAnnotation: [Function],
  isJSXAttribute: [Function],
  assertJSXAttribute: [Function],
  isJSXClosingElement: [Function],
  assertJSXClosingElement: [Function],
  isJSXElement: [Function],
  assertJSXElement: [Function],
  isJSXEmptyExpression: [Function],
  assertJSXEmptyExpression: [Function],
  isJSXExpressionContainer: [Function],
  assertJSXExpressionContainer: [Function],
  isJSXSpreadChild: [Function],
  assertJSXSpreadChild: [Function],
  isJSXIdentifier: [Function],
  assertJSXIdentifier: [Function],
  isJSXMemberExpression: [Function],
  assertJSXMemberExpression: [Function],
  isJSXNamespacedName: [Function],
  assertJSXNamespacedName: [Function],
  isJSXOpeningElement: [Function],
  assertJSXOpeningElement: [Function],
  isJSXSpreadAttribute: [Function],
  assertJSXSpreadAttribute: [Function],
  isJSXText: [Function],
  assertJSXText: [Function],
  isNoop: [Function],
  assertNoop: [Function],
  isParenthesizedExpression: [Function],
  assertParenthesizedExpression: [Function],
  isAwaitExpression: [Function],
  assertAwaitExpression: [Function],
  isForAwaitStatement: [Function],
  assertForAwaitStatement: [Function],
  isBindExpression: [Function],
  assertBindExpression: [Function],
  isImport: [Function],
  assertImport: [Function],
  isDecorator: [Function],
  assertDecorator: [Function],
  isDoExpression: [Function],
  assertDoExpression: [Function],
  isExportDefaultSpecifier: [Function],
  assertExportDefaultSpecifier: [Function],
  isExportNamespaceSpecifier: [Function],
  assertExportNamespaceSpecifier: [Function],
  isRestProperty: [Function],
  assertRestProperty: [Function],
  isSpreadProperty: [Function],
  assertSpreadProperty: [Function],
  FLIPPED_ALIAS_KEYS: 
   { Expression: 
      [ 'ArrayExpression',
        'AssignmentExpression',
        'BinaryExpression',
        'CallExpression',
        'ConditionalExpression',
        'FunctionExpression',
        'Identifier',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'LogicalExpression',
        'MemberExpression',
        'NewExpression',
        'ObjectExpression',
        'SequenceExpression',
        'ThisExpression',
        'UnaryExpression',
        'UpdateExpression',
        'ArrowFunctionExpression',
        'ClassExpression',
        'MetaProperty',
        'Super',
        'TaggedTemplateExpression',
        'TemplateLiteral',
        'YieldExpression',
        'TypeCastExpression',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXIdentifier',
        'JSXMemberExpression',
        'ParenthesizedExpression',
        'AwaitExpression',
        'BindExpression',
        'Import',
        'DoExpression' ],
     Binary: [ 'BinaryExpression', 'LogicalExpression' ],
     Scopable: 
      [ 'BlockStatement',
        'CatchClause',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression',
        'ForOfStatement',
        'ClassMethod',
        'ForAwaitStatement' ],
     BlockParent: 
      [ 'BlockStatement',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ForOfStatement',
        'ClassMethod',
        'ForAwaitStatement' ],
     Block: [ 'BlockStatement', 'Program' ],
     Statement: 
      [ 'BlockStatement',
        'BreakStatement',
        'ContinueStatement',
        'DebuggerStatement',
        'DoWhileStatement',
        'EmptyStatement',
        'ExpressionStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'IfStatement',
        'LabeledStatement',
        'ReturnStatement',
        'SwitchStatement',
        'ThrowStatement',
        'TryStatement',
        'VariableDeclaration',
        'WhileStatement',
        'WithStatement',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ForOfStatement',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareModuleExports',
        'DeclareTypeAlias',
        'DeclareOpaqueType',
        'DeclareVariable',
        'DeclareExportDeclaration',
        'InterfaceDeclaration',
        'TypeAlias',
        'OpaqueType',
        'ForAwaitStatement' ],
     Terminatorless: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement',
        'YieldExpression',
        'AwaitExpression' ],
     CompletionStatement: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement' ],
     Conditional: [ 'ConditionalExpression', 'IfStatement' ],
     Loop: 
      [ 'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'WhileStatement',
        'ForOfStatement',
        'ForAwaitStatement' ],
     While: [ 'DoWhileStatement', 'WhileStatement' ],
     ExpressionWrapper: 
      [ 'ExpressionStatement',
        'TypeCastExpression',
        'ParenthesizedExpression' ],
     For: 
      [ 'ForInStatement',
        'ForStatement',
        'ForOfStatement',
        'ForAwaitStatement' ],
     ForXStatement: [ 'ForInStatement', 'ForOfStatement', 'ForAwaitStatement' ],
     Function: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     FunctionParent: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     Pureish: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression' ],
     Declaration: 
      [ 'FunctionDeclaration',
        'VariableDeclaration',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareModuleExports',
        'DeclareTypeAlias',
        'DeclareOpaqueType',
        'DeclareVariable',
        'DeclareExportDeclaration',
        'InterfaceDeclaration',
        'TypeAlias',
        'OpaqueType' ],
     LVal: 
      [ 'Identifier',
        'MemberExpression',
        'RestElement',
        'AssignmentPattern',
        'ArrayPattern',
        'ObjectPattern' ],
     Literal: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'TemplateLiteral' ],
     Immutable: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXExpressionContainer',
        'JSXSpreadChild',
        'JSXOpeningElement',
        'JSXText' ],
     UserWhitespacable: 
      [ 'ObjectMethod',
        'ObjectProperty',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'ObjectTypeSpreadProperty' ],
     Method: [ 'ObjectMethod', 'ClassMethod' ],
     ObjectMember: [ 'ObjectMethod', 'ObjectProperty' ],
     Property: [ 'ObjectProperty', 'ClassProperty' ],
     UnaryLike: 
      [ 'UnaryExpression',
        'SpreadElement',
        'RestProperty',
        'SpreadProperty' ],
     Pattern: [ 'AssignmentPattern', 'ArrayPattern', 'ObjectPattern' ],
     Class: [ 'ClassDeclaration', 'ClassExpression' ],
     ModuleDeclaration: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration' ],
     ExportDeclaration: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration' ],
     ModuleSpecifier: 
      [ 'ExportSpecifier',
        'ImportDefaultSpecifier',
        'ImportNamespaceSpecifier',
        'ImportSpecifier',
        'ExportDefaultSpecifier',
        'ExportNamespaceSpecifier' ],
     Flow: 
      [ 'AnyTypeAnnotation',
        'ArrayTypeAnnotation',
        'BooleanTypeAnnotation',
        'BooleanLiteralTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'ClassImplements',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareModuleExports',
        'DeclareTypeAlias',
        'DeclareOpaqueType',
        'DeclareVariable',
        'DeclareExportDeclaration',
        'ExistentialTypeParam',
        'FunctionTypeAnnotation',
        'FunctionTypeParam',
        'GenericTypeAnnotation',
        'InterfaceExtends',
        'InterfaceDeclaration',
        'IntersectionTypeAnnotation',
        'MixedTypeAnnotation',
        'EmptyTypeAnnotation',
        'NullableTypeAnnotation',
        'NumericLiteralTypeAnnotation',
        'NumberTypeAnnotation',
        'StringLiteralTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'TupleTypeAnnotation',
        'TypeofTypeAnnotation',
        'TypeAlias',
        'OpaqueType',
        'TypeAnnotation',
        'TypeCastExpression',
        'TypeParameter',
        'TypeParameterDeclaration',
        'TypeParameterInstantiation',
        'ObjectTypeAnnotation',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'ObjectTypeSpreadProperty',
        'QualifiedTypeIdentifier',
        'UnionTypeAnnotation',
        'VoidTypeAnnotation' ],
     FlowBaseAnnotation: 
      [ 'AnyTypeAnnotation',
        'BooleanTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'MixedTypeAnnotation',
        'EmptyTypeAnnotation',
        'NumberTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'VoidTypeAnnotation' ],
     FlowDeclaration: 
      [ 'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareModuleExports',
        'DeclareTypeAlias',
        'DeclareOpaqueType',
        'DeclareVariable',
        'DeclareExportDeclaration',
        'InterfaceDeclaration',
        'TypeAlias',
        'OpaqueType' ],
     JSX: 
      [ 'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXExpressionContainer',
        'JSXSpreadChild',
        'JSXIdentifier',
        'JSXMemberExpression',
        'JSXNamespacedName',
        'JSXOpeningElement',
        'JSXSpreadAttribute',
        'JSXText' ] },
  EXPRESSION_TYPES: 
   [ 'ArrayExpression',
     'AssignmentExpression',
     'BinaryExpression',
     'CallExpression',
     'ConditionalExpression',
     'FunctionExpression',
     'Identifier',
     'StringLiteral',
     'NumericLiteral',
     'NullLiteral',
     'BooleanLiteral',
     'RegExpLiteral',
     'LogicalExpression',
     'MemberExpression',
     'NewExpression',
     'ObjectExpression',
     'SequenceExpression',
     'ThisExpression',
     'UnaryExpression',
     'UpdateExpression',
     'ArrowFunctionExpression',
     'ClassExpression',
     'MetaProperty',
     'Super',
     'TaggedTemplateExpression',
     'TemplateLiteral',
     'YieldExpression',
     'TypeCastExpression',
     'JSXElement',
     'JSXEmptyExpression',
     'JSXIdentifier',
     'JSXMemberExpression',
     'ParenthesizedExpression',
     'AwaitExpression',
     'BindExpression',
     'Import',
     'DoExpression' ],
  isExpression: [Function],
  assertExpression: [Function],
  BINARY_TYPES: [ 'BinaryExpression', 'LogicalExpression' ],
  isBinary: [Function],
  assertBinary: [Function],
  SCOPABLE_TYPES: 
   [ 'BlockStatement',
     'CatchClause',
     'DoWhileStatement',
     'ForInStatement',
     'ForStatement',
     'FunctionDeclaration',
     'FunctionExpression',
     'Program',
     'ObjectMethod',
     'SwitchStatement',
     'WhileStatement',
     'ArrowFunctionExpression',
     'ClassDeclaration',
     'ClassExpression',
     'ForOfStatement',
     'ClassMethod',
     'ForAwaitStatement' ],
  isScopable: [Function],
  assertScopable: [Function],
  BLOCKPARENT_TYPES: 
   [ 'BlockStatement',
     'DoWhileStatement',
     'ForInStatement',
     'ForStatement',
     'FunctionDeclaration',
     'FunctionExpression',
     'Program',
     'ObjectMethod',
     'SwitchStatement',
     'WhileStatement',
     'ArrowFunctionExpression',
     'ForOfStatement',
     'ClassMethod',
     'ForAwaitStatement' ],
  isBlockParent: [Function],
  assertBlockParent: [Function],
  BLOCK_TYPES: [ 'BlockStatement', 'Program' ],
  isBlock: [Function],
  assertBlock: [Function],
  STATEMENT_TYPES: 
   [ 'BlockStatement',
     'BreakStatement',
     'ContinueStatement',
     'DebuggerStatement',
     'DoWhileStatement',
     'EmptyStatement',
     'ExpressionStatement',
     'ForInStatement',
     'ForStatement',
     'FunctionDeclaration',
     'IfStatement',
     'LabeledStatement',
     'ReturnStatement',
     'SwitchStatement',
     'ThrowStatement',
     'TryStatement',
     'VariableDeclaration',
     'WhileStatement',
     'WithStatement',
     'ClassDeclaration',
     'ExportAllDeclaration',
     'ExportDefaultDeclaration',
     'ExportNamedDeclaration',
     'ForOfStatement',
     'ImportDeclaration',
     'DeclareClass',
     'DeclareFunction',
     'DeclareInterface',
     'DeclareModule',
     'DeclareModuleExports',
     'DeclareTypeAlias',
     'DeclareOpaqueType',
     'DeclareVariable',
     'DeclareExportDeclaration',
     'InterfaceDeclaration',
     'TypeAlias',
     'OpaqueType',
     'ForAwaitStatement' ],
  isStatement: [Function],
  assertStatement: [Function],
  TERMINATORLESS_TYPES: 
   [ 'BreakStatement',
     'ContinueStatement',
     'ReturnStatement',
     'ThrowStatement',
     'YieldExpression',
     'AwaitExpression' ],
  isTerminatorless: [Function],
  assertTerminatorless: [Function],
  COMPLETIONSTATEMENT_TYPES: 
   [ 'BreakStatement',
     'ContinueStatement',
     'ReturnStatement',
     'ThrowStatement' ],
  isCompletionStatement: [Function],
  assertCompletionStatement: [Function],
  CONDITIONAL_TYPES: [ 'ConditionalExpression', 'IfStatement' ],
  isConditional: [Function],
  assertConditional: [Function],
  LOOP_TYPES: 
   [ 'DoWhileStatement',
     'ForInStatement',
     'ForStatement',
     'WhileStatement',
     'ForOfStatement',
     'ForAwaitStatement' ],
  isLoop: [Function],
  assertLoop: [Function],
  WHILE_TYPES: [ 'DoWhileStatement', 'WhileStatement' ],
  isWhile: [Function],
  assertWhile: [Function],
  EXPRESSIONWRAPPER_TYPES: 
   [ 'ExpressionStatement',
     'TypeCastExpression',
     'ParenthesizedExpression' ],
  isExpressionWrapper: [Function],
  assertExpressionWrapper: [Function],
  FOR_TYPES: 
   [ 'ForInStatement',
     'ForStatement',
     'ForOfStatement',
     'ForAwaitStatement' ],
  isFor: [Function],
  assertFor: [Function],
  FORXSTATEMENT_TYPES: [ 'ForInStatement', 'ForOfStatement', 'ForAwaitStatement' ],
  isForXStatement: [Function],
  assertForXStatement: [Function],
  FUNCTION_TYPES: 
   [ 'FunctionDeclaration',
     'FunctionExpression',
     'ObjectMethod',
     'ArrowFunctionExpression',
     'ClassMethod' ],
  isFunction: [Function],
  assertFunction: [Function],
  FUNCTIONPARENT_TYPES: 
   [ 'FunctionDeclaration',
     'FunctionExpression',
     'Program',
     'ObjectMethod',
     'ArrowFunctionExpression',
     'ClassMethod' ],
  isFunctionParent: [Function],
  assertFunctionParent: [Function],
  PUREISH_TYPES: 
   [ 'FunctionDeclaration',
     'FunctionExpression',
     'StringLiteral',
     'NumericLiteral',
     'NullLiteral',
     'BooleanLiteral',
     'ArrowFunctionExpression',
     'ClassDeclaration',
     'ClassExpression' ],
  isPureish: [Function],
  assertPureish: [Function],
  DECLARATION_TYPES: 
   [ 'FunctionDeclaration',
     'VariableDeclaration',
     'ClassDeclaration',
     'ExportAllDeclaration',
     'ExportDefaultDeclaration',
     'ExportNamedDeclaration',
     'ImportDeclaration',
     'DeclareClass',
     'DeclareFunction',
     'DeclareInterface',
     'DeclareModule',
     'DeclareModuleExports',
     'DeclareTypeAlias',
     'DeclareOpaqueType',
     'DeclareVariable',
     'DeclareExportDeclaration',
     'InterfaceDeclaration',
     'TypeAlias',
     'OpaqueType' ],
  isDeclaration: [Function],
  assertDeclaration: [Function],
  LVAL_TYPES: 
   [ 'Identifier',
     'MemberExpression',
     'RestElement',
     'AssignmentPattern',
     'ArrayPattern',
     'ObjectPattern' ],
  isLVal: [Function],
  assertLVal: [Function],
  LITERAL_TYPES: 
   [ 'StringLiteral',
     'NumericLiteral',
     'NullLiteral',
     'BooleanLiteral',
     'RegExpLiteral',
     'TemplateLiteral' ],
  isLiteral: [Function],
  assertLiteral: [Function],
  IMMUTABLE_TYPES: 
   [ 'StringLiteral',
     'NumericLiteral',
     'NullLiteral',
     'BooleanLiteral',
     'JSXAttribute',
     'JSXClosingElement',
     'JSXElement',
     'JSXExpressionContainer',
     'JSXSpreadChild',
     'JSXOpeningElement',
     'JSXText' ],
  assertImmutable: [Function],
  USERWHITESPACABLE_TYPES: 
   [ 'ObjectMethod',
     'ObjectProperty',
     'ObjectTypeCallProperty',
     'ObjectTypeIndexer',
     'ObjectTypeProperty',
     'ObjectTypeSpreadProperty' ],
  isUserWhitespacable: [Function],
  assertUserWhitespacable: [Function],
  METHOD_TYPES: [ 'ObjectMethod', 'ClassMethod' ],
  isMethod: [Function],
  assertMethod: [Function],
  OBJECTMEMBER_TYPES: [ 'ObjectMethod', 'ObjectProperty' ],
  isObjectMember: [Function],
  assertObjectMember: [Function],
  PROPERTY_TYPES: [ 'ObjectProperty', 'ClassProperty' ],
  isProperty: [Function],
  assertProperty: [Function],
  UNARYLIKE_TYPES: 
   [ 'UnaryExpression',
     'SpreadElement',
     'RestProperty',
     'SpreadProperty' ],
  isUnaryLike: [Function],
  assertUnaryLike: [Function],
  PATTERN_TYPES: [ 'AssignmentPattern', 'ArrayPattern', 'ObjectPattern' ],
  isPattern: [Function],
  assertPattern: [Function],
  CLASS_TYPES: [ 'ClassDeclaration', 'ClassExpression' ],
  isClass: [Function],
  assertClass: [Function],
  MODULEDECLARATION_TYPES: 
   [ 'ExportAllDeclaration',
     'ExportDefaultDeclaration',
     'ExportNamedDeclaration',
     'ImportDeclaration' ],
  isModuleDeclaration: [Function],
  assertModuleDeclaration: [Function],
  EXPORTDECLARATION_TYPES: 
   [ 'ExportAllDeclaration',
     'ExportDefaultDeclaration',
     'ExportNamedDeclaration' ],
  isExportDeclaration: [Function],
  assertExportDeclaration: [Function],
  MODULESPECIFIER_TYPES: 
   [ 'ExportSpecifier',
     'ImportDefaultSpecifier',
     'ImportNamespaceSpecifier',
     'ImportSpecifier',
     'ExportDefaultSpecifier',
     'ExportNamespaceSpecifier' ],
  isModuleSpecifier: [Function],
  assertModuleSpecifier: [Function],
  FLOW_TYPES: 
   [ 'AnyTypeAnnotation',
     'ArrayTypeAnnotation',
     'BooleanTypeAnnotation',
     'BooleanLiteralTypeAnnotation',
     'NullLiteralTypeAnnotation',
     'ClassImplements',
     'DeclareClass',
     'DeclareFunction',
     'DeclareInterface',
     'DeclareModule',
     'DeclareModuleExports',
     'DeclareTypeAlias',
     'DeclareOpaqueType',
     'DeclareVariable',
     'DeclareExportDeclaration',
     'ExistentialTypeParam',
     'FunctionTypeAnnotation',
     'FunctionTypeParam',
     'GenericTypeAnnotation',
     'InterfaceExtends',
     'InterfaceDeclaration',
     'IntersectionTypeAnnotation',
     'MixedTypeAnnotation',
     'EmptyTypeAnnotation',
     'NullableTypeAnnotation',
     'NumericLiteralTypeAnnotation',
     'NumberTypeAnnotation',
     'StringLiteralTypeAnnotation',
     'StringTypeAnnotation',
     'ThisTypeAnnotation',
     'TupleTypeAnnotation',
     'TypeofTypeAnnotation',
     'TypeAlias',
     'OpaqueType',
     'TypeAnnotation',
     'TypeCastExpression',
     'TypeParameter',
     'TypeParameterDeclaration',
     'TypeParameterInstantiation',
     'ObjectTypeAnnotation',
     'ObjectTypeCallProperty',
     'ObjectTypeIndexer',
     'ObjectTypeProperty',
     'ObjectTypeSpreadProperty',
     'QualifiedTypeIdentifier',
     'UnionTypeAnnotation',
     'VoidTypeAnnotation' ],
  isFlow: [Function],
  assertFlow: [Function],
  FLOWBASEANNOTATION_TYPES: 
   [ 'AnyTypeAnnotation',
     'BooleanTypeAnnotation',
     'NullLiteralTypeAnnotation',
     'MixedTypeAnnotation',
     'EmptyTypeAnnotation',
     'NumberTypeAnnotation',
     'StringTypeAnnotation',
     'ThisTypeAnnotation',
     'VoidTypeAnnotation' ],
  isFlowBaseAnnotation: [Function],
  assertFlowBaseAnnotation: [Function],
  FLOWDECLARATION_TYPES: 
   [ 'DeclareClass',
     'DeclareFunction',
     'DeclareInterface',
     'DeclareModule',
     'DeclareModuleExports',
     'DeclareTypeAlias',
     'DeclareOpaqueType',
     'DeclareVariable',
     'DeclareExportDeclaration',
     'InterfaceDeclaration',
     'TypeAlias',
     'OpaqueType' ],
  isFlowDeclaration: [Function],
  assertFlowDeclaration: [Function],
  JSX_TYPES: 
   [ 'JSXAttribute',
     'JSXClosingElement',
     'JSXElement',
     'JSXEmptyExpression',
     'JSXExpressionContainer',
     'JSXSpreadChild',
     'JSXIdentifier',
     'JSXMemberExpression',
     'JSXNamespacedName',
     'JSXOpeningElement',
     'JSXSpreadAttribute',
     'JSXText' ],
  isJSX: [Function],
  assertJSX: [Function],
  ArrayExpression: [Function: builder],
  arrayExpression: [Function: builder],
  AssignmentExpression: [Function: builder],
  assignmentExpression: [Function: builder],
  BinaryExpression: [Function: builder],
  binaryExpression: [Function: builder],
  Directive: [Function: builder],
  directive: [Function: builder],
  DirectiveLiteral: [Function: builder],
  directiveLiteral: [Function: builder],
  BlockStatement: [Function: builder],
  blockStatement: [Function: builder],
  BreakStatement: [Function: builder],
  breakStatement: [Function: builder],
  CallExpression: [Function: builder],
  callExpression: [Function: builder],
  CatchClause: [Function: builder],
  catchClause: [Function: builder],
  ConditionalExpression: [Function: builder],
  conditionalExpression: [Function: builder],
  ContinueStatement: [Function: builder],
  continueStatement: [Function: builder],
  DebuggerStatement: [Function: builder],
  debuggerStatement: [Function: builder],
  DoWhileStatement: [Function: builder],
  doWhileStatement: [Function: builder],
  EmptyStatement: [Function: builder],
  emptyStatement: [Function: builder],
  ExpressionStatement: [Function: builder],
  expressionStatement: [Function: builder],
  File: [Function: builder],
  file: [Function: builder],
  ForInStatement: [Function: builder],
  forInStatement: [Function: builder],
  ForStatement: [Function: builder],
  forStatement: [Function: builder],
  FunctionDeclaration: [Function: builder],
  functionDeclaration: [Function: builder],
  FunctionExpression: [Function: builder],
  functionExpression: [Function: builder],
  Identifier: [Function: builder],
  identifier: [Function: builder],
  IfStatement: [Function: builder],
  ifStatement: [Function: builder],
  LabeledStatement: [Function: builder],
  labeledStatement: [Function: builder],
  StringLiteral: [Function: builder],
  stringLiteral: [Function: builder],
  NumericLiteral: [Function: builder],
  numericLiteral: [Function: builder],
  NullLiteral: [Function: builder],
  nullLiteral: [Function: builder],
  BooleanLiteral: [Function: builder],
  booleanLiteral: [Function: builder],
  RegExpLiteral: [Function: builder],
  regExpLiteral: [Function: builder],
  LogicalExpression: [Function: builder],
  logicalExpression: [Function: builder],
  MemberExpression: [Function: builder],
  memberExpression: [Function: builder],
  NewExpression: [Function: builder],
  newExpression: [Function: builder],
  Program: [Function: builder],
  program: [Function: builder],
  ObjectExpression: [Function: builder],
  objectExpression: [Function: builder],
  ObjectMethod: [Function: builder],
  objectMethod: [Function: builder],
  ObjectProperty: [Function: builder],
  objectProperty: [Function: builder],
  RestElement: [Function: builder],
  restElement: [Function: builder],
  ReturnStatement: [Function: builder],
  returnStatement: [Function: builder],
  SequenceExpression: [Function: builder],
  sequenceExpression: [Function: builder],
  SwitchCase: [Function: builder],
  switchCase: [Function: builder],
  SwitchStatement: [Function: builder],
  switchStatement: [Function: builder],
  ThisExpression: [Function: builder],
  thisExpression: [Function: builder],
  ThrowStatement: [Function: builder],
  throwStatement: [Function: builder],
  TryStatement: [Function: builder],
  tryStatement: [Function: builder],
  UnaryExpression: [Function: builder],
  unaryExpression: [Function: builder],
  UpdateExpression: [Function: builder],
  updateExpression: [Function: builder],
  VariableDeclaration: [Function: builder],
  variableDeclaration: [Function: builder],
  VariableDeclarator: [Function: builder],
  variableDeclarator: [Function: builder],
  WhileStatement: [Function: builder],
  whileStatement: [Function: builder],
  WithStatement: [Function: builder],
  withStatement: [Function: builder],
  AssignmentPattern: [Function: builder],
  assignmentPattern: [Function: builder],
  ArrayPattern: [Function: builder],
  arrayPattern: [Function: builder],
  ArrowFunctionExpression: [Function: builder],
  arrowFunctionExpression: [Function: builder],
  ClassBody: [Function: builder],
  classBody: [Function: builder],
  ClassDeclaration: [Function: builder],
  classDeclaration: [Function: builder],
  ClassExpression: [Function: builder],
  classExpression: [Function: builder],
  ExportAllDeclaration: [Function: builder],
  exportAllDeclaration: [Function: builder],
  ExportDefaultDeclaration: [Function: builder],
  exportDefaultDeclaration: [Function: builder],
  ExportNamedDeclaration: [Function: builder],
  exportNamedDeclaration: [Function: builder],
  ExportSpecifier: [Function: builder],
  exportSpecifier: [Function: builder],
  ForOfStatement: [Function: builder],
  forOfStatement: [Function: builder],
  ImportDeclaration: [Function: builder],
  importDeclaration: [Function: builder],
  ImportDefaultSpecifier: [Function: builder],
  importDefaultSpecifier: [Function: builder],
  ImportNamespaceSpecifier: [Function: builder],
  importNamespaceSpecifier: [Function: builder],
  ImportSpecifier: [Function: builder],
  importSpecifier: [Function: builder],
  MetaProperty: [Function: builder],
  metaProperty: [Function: builder],
  ClassMethod: [Function: builder],
  classMethod: [Function: builder],
  ObjectPattern: [Function: builder],
  objectPattern: [Function: builder],
  SpreadElement: [Function: builder],
  spreadElement: [Function: builder],
  Super: [Function: builder],
  super: [Function: builder],
  TaggedTemplateExpression: [Function: builder],
  taggedTemplateExpression: [Function: builder],
  TemplateElement: [Function: builder],
  templateElement: [Function: builder],
  TemplateLiteral: [Function: builder],
  templateLiteral: [Function: builder],
  YieldExpression: [Function: builder],
  yieldExpression: [Function: builder],
  AnyTypeAnnotation: [Function: builder],
  anyTypeAnnotation: [Function: builder],
  ArrayTypeAnnotation: [Function: builder],
  arrayTypeAnnotation: [Function: builder],
  BooleanTypeAnnotation: [Function: builder],
  booleanTypeAnnotation: [Function: builder],
  BooleanLiteralTypeAnnotation: [Function: builder],
  booleanLiteralTypeAnnotation: [Function: builder],
  NullLiteralTypeAnnotation: [Function: builder],
  nullLiteralTypeAnnotation: [Function: builder],
  ClassImplements: [Function: builder],
  classImplements: [Function: builder],
  ClassProperty: [Function: builder],
  classProperty: [Function: builder],
  DeclareClass: [Function: builder],
  declareClass: [Function: builder],
  DeclareFunction: [Function: builder],
  declareFunction: [Function: builder],
  DeclareInterface: [Function: builder],
  declareInterface: [Function: builder],
  DeclareModule: [Function: builder],
  declareModule: [Function: builder],
  DeclareModuleExports: [Function: builder],
  declareModuleExports: [Function: builder],
  DeclareTypeAlias: [Function: builder],
  declareTypeAlias: [Function: builder],
  DeclareOpaqueType: [Function: builder],
  declareOpaqueType: [Function: builder],
  DeclareVariable: [Function: builder],
  declareVariable: [Function: builder],
  DeclareExportDeclaration: [Function: builder],
  declareExportDeclaration: [Function: builder],
  ExistentialTypeParam: [Function: builder],
  existentialTypeParam: [Function: builder],
  FunctionTypeAnnotation: [Function: builder],
  functionTypeAnnotation: [Function: builder],
  FunctionTypeParam: [Function: builder],
  functionTypeParam: [Function: builder],
  GenericTypeAnnotation: [Function: builder],
  genericTypeAnnotation: [Function: builder],
  InterfaceExtends: [Function: builder],
  interfaceExtends: [Function: builder],
  InterfaceDeclaration: [Function: builder],
  interfaceDeclaration: [Function: builder],
  IntersectionTypeAnnotation: [Function: builder],
  intersectionTypeAnnotation: [Function: builder],
  MixedTypeAnnotation: [Function: builder],
  mixedTypeAnnotation: [Function: builder],
  EmptyTypeAnnotation: [Function: builder],
  emptyTypeAnnotation: [Function: builder],
  NullableTypeAnnotation: [Function: builder],
  nullableTypeAnnotation: [Function: builder],
  NumericLiteralTypeAnnotation: [Function: builder],
  numericLiteralTypeAnnotation: [Function: builder],
  NumberTypeAnnotation: [Function: builder],
  numberTypeAnnotation: [Function: builder],
  StringLiteralTypeAnnotation: [Function: builder],
  stringLiteralTypeAnnotation: [Function: builder],
  StringTypeAnnotation: [Function: builder],
  stringTypeAnnotation: [Function: builder],
  ThisTypeAnnotation: [Function: builder],
  thisTypeAnnotation: [Function: builder],
  TupleTypeAnnotation: [Function: builder],
  tupleTypeAnnotation: [Function: builder],
  TypeofTypeAnnotation: [Function: builder],
  typeofTypeAnnotation: [Function: builder],
  TypeAlias: [Function: builder],
  typeAlias: [Function: builder],
  OpaqueType: [Function: builder],
  opaqueType: [Function: builder],
  TypeAnnotation: [Function: builder],
  typeAnnotation: [Function: builder],
  TypeCastExpression: [Function: builder],
  typeCastExpression: [Function: builder],
  TypeParameter: [Function: builder],
  typeParameter: [Function: builder],
  TypeParameterDeclaration: [Function: builder],
  typeParameterDeclaration: [Function: builder],
  TypeParameterInstantiation: [Function: builder],
  typeParameterInstantiation: [Function: builder],
  ObjectTypeAnnotation: [Function: builder],
  objectTypeAnnotation: [Function: builder],
  ObjectTypeCallProperty: [Function: builder],
  objectTypeCallProperty: [Function: builder],
  ObjectTypeIndexer: [Function: builder],
  objectTypeIndexer: [Function: builder],
  ObjectTypeProperty: [Function: builder],
  objectTypeProperty: [Function: builder],
  ObjectTypeSpreadProperty: [Function: builder],
  objectTypeSpreadProperty: [Function: builder],
  QualifiedTypeIdentifier: [Function: builder],
  qualifiedTypeIdentifier: [Function: builder],
  UnionTypeAnnotation: [Function: builder],
  unionTypeAnnotation: [Function: builder],
  VoidTypeAnnotation: [Function: builder],
  voidTypeAnnotation: [Function: builder],
  JSXAttribute: [Function: builder],
  jSXAttribute: [Function: builder],
  JSXClosingElement: [Function: builder],
  jSXClosingElement: [Function: builder],
  JSXElement: [Function: builder],
  jSXElement: [Function: builder],
  JSXEmptyExpression: [Function: builder],
  jSXEmptyExpression: [Function: builder],
  JSXExpressionContainer: [Function: builder],
  jSXExpressionContainer: [Function: builder],
  JSXSpreadChild: [Function: builder],
  jSXSpreadChild: [Function: builder],
  JSXIdentifier: [Function: builder],
  jSXIdentifier: [Function: builder],
  JSXMemberExpression: [Function: builder],
  jSXMemberExpression: [Function: builder],
  JSXNamespacedName: [Function: builder],
  jSXNamespacedName: [Function: builder],
  JSXOpeningElement: [Function: builder],
  jSXOpeningElement: [Function: builder],
  JSXSpreadAttribute: [Function: builder],
  jSXSpreadAttribute: [Function: builder],
  JSXText: [Function: builder],
  jSXText: [Function: builder],
  Noop: [Function: builder],
  noop: [Function: builder],
  ParenthesizedExpression: [Function: builder],
  parenthesizedExpression: [Function: builder],
  AwaitExpression: [Function: builder],
  awaitExpression: [Function: builder],
  ForAwaitStatement: [Function: builder],
  forAwaitStatement: [Function: builder],
  BindExpression: [Function: builder],
  bindExpression: [Function: builder],
  Import: [Function: builder],
  import: [Function: builder],
  Decorator: [Function: builder],
  decorator: [Function: builder],
  DoExpression: [Function: builder],
  doExpression: [Function: builder],
  ExportDefaultSpecifier: [Function: builder],
  exportDefaultSpecifier: [Function: builder],
  ExportNamespaceSpecifier: [Function: builder],
  exportNamespaceSpecifier: [Function: builder],
  RestProperty: [Function: builder],
  restProperty: [Function: builder],
  SpreadProperty: [Function: builder],
  spreadProperty: [Function: builder],
  numberLiteral: [Function],
  NumberLiteral: [Function],
  isNumberLiteral: [Function],
  assertNumberLiteral: [Function],
  regexLiteral: [Function],
  RegexLiteral: [Function],
  isRegexLiteral: [Function],
  assertRegexLiteral: [Function] }
Node {
  type: 'BooleanLiteral',
  start: 23,
  end: 27,
  loc: 
   SourceLocation {
     start: Position { line: 1, column: 23 },
     end: Position { line: 1, column: 27 } },
  value: true }
function f(a) {
  var x = true;
}
    ✓ Boolean (44ms)


  1 passing (59ms)

